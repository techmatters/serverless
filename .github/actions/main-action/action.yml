# Copyright (C) 2021-2023 Technology Matters
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see https://www.gnu.org/licenses/.

# Install the Twilio CLI and the serverless plugin then deploy the function
name: 'main-action'
description: 'Install the Twilio CLI and the serverless plugin then deploy the function'
inputs:
  account-sid:
    description: 'Twilio Account SID'
    required: true
  auth-token:
    description: 'Twilio Token'
    required: true
  workspace-sid:
    description: 'Twilio Workspace SID'
    required: true
  transfer-workflow-sid:
    description: 'Chat Transfer Workflow SID'
    required: true
  sync-service-api-key:
    description: 'Sync Service API Key'
    required: true
  sync-service-api-secret:
    description: 'Sync Service API Secret'
    required: true
  sync-service-sid:
    description: 'Sync Service SID'
    required: true
  chat-service-sid:
    description: 'Chat Service SID'
    required: true
  operating-info-key:
    description: 'Operating Info Key'
    required: true
  flex-proxy-service-sid:
    description: 'Flex Proxy Service SID'
    required: true
  hrm-static-key:
    description: 'HRM static key to make HRM calls'
    required: true
  survey-workflow-sid:
    description: 'Survey Workflow SID'
    required: true
  post-survey-bot-chat-url:
    description: 'Post Survey Bot Programmable Chat URL'
    required: true
  aselo-app-access-key:
    description: 'AWS credentials for Aselo user'
    required: true
  aselo-app-secret-key:
    description: 'AWS credentials for Aselo user'
    required: true
  aws-region:
    description: 'AWS region where Aselo documents bucket is hosted'
    required: true
  s3-bucket:
    description: 'S3 bucket name where Aselo documents are stored'
    required: true
  helpline-code:
    description: 'The short (usually 2 character) upper case code used to identify the helpline internally, e.g. ZA, IN, BR.'
    required: true
  environment-code:
    description: 'The short upper case code used to identify the environment internally, e.g. STG, PROD, DEV'
    required: true
  environment:
    description: The environment to deploy to, e.g. staging, production, development (Yes, this is a duplicate of the above, but it's needed for the workflow to run... for now)
    required: true
  send-slack-message:
    description: 'Specifies if should send a Slack message at the end of successful run. Defaults to true'
    required: false
    default: 'true'
  disable-operating-hours:
    description: 'Specifies if we should disable enforcement of operating hours (uuseful for non production accounts). Defaults to false'
    required: false
    default: 'false'
runs:
  using: 'composite'
  steps:
    - name: Set helpline-name
      run: echo "helpline-name=${{ inputs.helpline-code }}_${{ inputs.environment-code }}" >> $GITHUB_ENV
      shell: bash
    # Set any env vars needed from Parameter Store here
    # Slack env
    - name: Set GITHUB_ACTIONS_SLACK_BOT_TOKEN
      uses: 'marvinpinto/action-inject-ssm-secrets@latest'
      with:
        ssm_parameter: 'GITHUB_ACTIONS_SLACK_BOT_TOKEN'
        env_variable_name: 'GITHUB_ACTIONS_SLACK_BOT_TOKEN'
    - name: Set ASELO_DEPLOYS_CHANNEL_ID
      uses: 'marvinpinto/action-inject-ssm-secrets@latest'
      with:
        ssm_parameter: 'ASELO_DEPLOYS_CHANNEL_ID'
        env_variable_name: 'ASELO_DEPLOYS_CHANNEL_ID'
    # Prepare everything to compile the serverless application with proper env
    - name: Create environment variable file
      run: touch .env
      shell: bash
    - name: Fill .env
      run: |
        cat <<EOT >> .env
        HELPLINE_CODE=${{ inputs.helpline-code }}
        ENVIRONMENT=${{ inputs.environment }}
        TWILIO_WORKSPACE_SID=${{ inputs.workspace-sid }}
        TWILIO_CHAT_TRANSFER_WORKFLOW_SID=${{ inputs.transfer-workflow-sid }}
        SYNC_SERVICE_API_KEY=${{ inputs.sync-service-api-key }}
        SYNC_SERVICE_API_SECRET=${{ inputs.sync-service-api-secret }}
        SYNC_SERVICE_SID=${{ inputs.sync-service-sid }}
        CHAT_SERVICE_SID=${{ inputs.chat-service-sid }}
        OPERATING_INFO_KEY=${{ inputs.operating-info-key }}
        FLEX_PROXY_SERVICE_SID=${{ inputs.flex-proxy-service-sid }}
        HRM_STATIC_KEY=${{ inputs.hrm-static-key }}
        SURVEY_WORKFLOW_SID=${{ inputs.survey-workflow-sid }}
        POST_SURVEY_BOT_CHAT_URL=${{ inputs.post-survey-bot-chat-url }}
        ASELO_APP_ACCESS_KEY=${{ inputs.aselo-app-access-key }}
        ASELO_APP_SECRET_KEY=${{ inputs.aselo-app-secret-key }}
        S3_BUCKET=${{ inputs.s3-bucket }}
        AWS_REGION=${{ inputs.aws-region }}
        TWILIO_SERVERLESS_API_CONCURRENCY=1
        EOT
      shell: bash
      # Can be overridden in custom action
    - name: Disable Operating Hours for staging
      run: |
        cat <<EOT >> .env
        DISABLE_OPERATING_HOURS_CHECK=true
        EOT
      shell: bash
      if: ${{ inputs.disable-operating-hours == 'true' }}

    # Run custom action to perform per-helpline based actions
    - name: Execute custom action (if any)
      uses: ./.github/actions/custom-actions
      with:
        helpline-name: ${{ env.helpline-name }}
        account-sid: ${{ inputs.account-sid }}
    # Install dependencies for the twilio functions
    - name: Install dependencies for the twilio functions
      run: npm ci
      shell: bash
    # Compile typescript to javascript
    - name: Transpile typescript to javascript
      run: npx tsc
      shell: bash
    # Install Twilio CLI and run deploy command
    - name: Install Twilio CLI and run deploy command
      run: npm install twilio-cli -g && twilio plugins:install @twilio-labs/plugin-serverless
      env:
        TWILIO_ACCOUNT_SID: ${{ inputs.account-sid }}
        TWILIO_AUTH_TOKEN: ${{ inputs.auth-token }}
      shell: bash
    - name: Run deploy
      run: twilio serverless:deploy --runtime=node16 --service-name=serverless --environment=production --force
      env:
        TWILIO_ACCOUNT_SID: ${{ inputs.account-sid }}
        TWILIO_AUTH_TOKEN: ${{ inputs.auth-token }}
        TWILIO_SERVERLESS_API_CONCURRENCY: '1'
      shell: bash
    # Run the health check
    - run: npm run healthcheck
      env:
        TWILIO_ACCOUNT_SID: ${{ inputs.account-sid }}
        TWILIO_AUTH_TOKEN: ${{ inputs.auth-token }}
      working-directory: ${{ github.action_path }}
      shell: bash

    # Send Slack notifying success
    - name: Slack Aselo channel
      id: slack-parallel
      uses: slackapi/slack-github-action@v1.14.0
      if: ${{ inputs.send-slack-message != 'false' }}
      with:
        channel-id: ${{ env.ASELO_DEPLOYS_CHANNEL_ID }}
        slack-message: "`[Serverless]` Deployment to `${{ env.helpline-name }}` from ${{ github.ref_type }} `${{ github.ref_name }}` requested by `${{ github.triggering_actor }}` completed using workflow '${{ github.workflow }}' with SHA ${{ github.sha }} :rocket:."
      env:
        SLACK_BOT_TOKEN: ${{ env.GITHUB_ACTIONS_SLACK_BOT_TOKEN }}
